✦ 제공된 CryEngine/CryCommon/CryMemory/ 디렉토리의 소스 코드 파일들은 크라이엔진의 정교하고 다층적인 메모리 관리 시스템을 구성합니다. 이 시스템의 주요 목표는
  고성능 게임 환경에 필수적인 성능 최적화, 메모리 단편화 방지, 그리고 상세한 메모리 추적 및 디버깅 기능을 제공하는 것입니다.

  전체 시스템을 분석한 결과는 다음과 같습니다.

  개요 (High-Level Overview)

  크라이엔진은 표준 C/C++의 malloc/free나 new/delete를 직접 사용하지 않습니다. 대신, 모든 메모리 할당과 해제를 중앙에서 관리하는 자체 메모리
  관리자(IMemoryManager)를 통해 처리합니다. 이 접근 방식은 다음과 같은 장점을 가집니다.

   * 플랫폼 독립성: 각기 다른 콘솔과 PC 환경의 메모리 모델 차이를 추상화합니다.
   * 성능: 특정 목적(예: 수많은 작은 객체, 대용량 버퍼)에 최적화된 다양한 할당 전략을 사용하여 malloc 같은 범용 할당기보다 훨씬 빠릅니다.
   * 안정성: 메모리 단편화(Fragmentation)를 최소화하여, 전체 메모리는 충분하지만 큰 연속 공간이 없어 할당에 실패하는 문제를 방지합니다.
   * 디버깅: 모든 할당/해제를 추적하여 메모리 누수, 오버런, 중복 해제 등의 오류를 쉽게 찾아낼 수 있습니다. ICrySizer 같은 도구로 시스템의 메모리 사용량을
     실시간으로 분석할 수 있습니다.

  계층적 구조 (Layered Architecture)

  메모리 시스템은 여러 계층으로 구성되어 있습니다.

   1. 최하위 계층: 가상 메모리 관리 (`VirtualMemory.h`)
       * 운영체제(Windows의 VirtualAlloc, POSIX의 mmap)로부터 직접 대규모 가상 주소 공간을 예약(reserve)하고, 필요할 때 물리 메모리를 할당(commit)하는 가장
         낮은 수준의 인터페이스입니다.
       * 다른 모든 커스텀 힙과 할당기들의 기반이 됩니다.

   2. 중간 계층: 핵심 할당기 (Core Allocators)
       * 버킷 할당기 (`BucketAllocator.h`): 작은 크기의 메모리 할당을 매우 효율적으로 처리하기 위해 설계되었습니다. 다양한 크기(예: 8, 16, 32바이트)를 위한
         "버킷"을 미리 만들어두고, 요청 크기에 맞는 버킷에서 메모리를 할당합니다. 이는 단편화를 줄이고 할당 속도를 높입니다.
       * 노드 할당기 (`CryMemoryAllocator.h`): STL 컨테이너와 같이 작고 빈번한 할당에 사용되는 또 다른 고성능 할당기입니다. 내부적으로 큰 메모리
         덩어리(Chunk)를 할당받아 작은 노드들로 쪼개어 관리합니다.
       * 풀 할당기 (`CryPool/` 디렉토리): 매우 유연하고 모듈화된 할당기 시스템입니다. 개발자는 템플릿 조합을 통해 원하는 특성의 메모리 풀을 만들 수 있습니다.
           * Memory.h: 메모리를 정적(컴파일 타임 크기 지정)으로 할당할지, 동적(런타임)으로 할당할지 결정합니다.
           * Container.h: 할당된 메모리를 관리하는 방식(데이터 바로 앞에 헤더를 두는 InPlace 방식, 또는 외부 핸들을 통해 간접적으로 참조하여 메모리 조각
             모음이 가능하게 하는 Referenced 방식)을 결정합니다.
           * Allocator.h: 할당 전략(FirstFit, BestFit, WorstFit)을 선택합니다.
           * Defrag.h: Referenced 방식과 함께 사용하여 메모리 조각 모음을 수행합니다.
       * 힙 할당기 (`HeapAllocator.h`): 페이지 단위로 메모리를 관리하는 범용 힙입니다. 다른 할당기의 기반으로 사용될 수 있습니다.
       * 조각 모음 할당기 (`IDefragAllocator.h`): 스트리밍 데이터처럼 크고 수명이 긴 메모리 블록을 단편화 없이 관리하기 위한 인터페이스입니다.

   3. 최상위 계층: 전역 인터페이스 (`CryMemoryManager.h`)
       * 엔진의 모든 모듈이 메모리를 요청하는 단일 창구입니다. CryMalloc, CryFree, CryRealloc 등의 전역 함수를 제공합니다.
       * 전역 operator new와 operator delete를 오버로드하여 C++의 기본 메모리 요청조차 이 시스템을 통하도록 강제합니다.
       * IMemoryManager 인터페이스를 통해 메모리 통계 조회, 힙 추적 등 고급 기능을 제공합니다.

   4. 보조 및 유틸리티
       * STL 래퍼 (`STLPoolAllocator.h`, `STLGlobalAllocator.h`, 등): std::vector, std::list 같은 STL 컨테이너가 크라이엔진의 커스텀 할당기를 사용할 수 있도록
         하는 래퍼 클래스입니다. 이를 통해 STL 사용 시에도 성능 및 메모리 추적의 이점을 누릴 수 있습니다.
       * 메모리 사이저 (`CrySizer.h`): ICrySizer 인터페이스는 객체 트리를 순회하며 각 객체가 차지하는 메모리의 총량을 계산하는 데 사용됩니다. 이는 메모리
         사용량을 분석하고 최적화하는 데 매우 중요한 도구입니다.
       * 저수준 접근 (`MemoryAccess.h`): memcpy를 최적화하거나 CPU 캐시를 효율적으로 사용하기 위한 프리페치(prefetch) 같은 저수준 함수를 제공합니다.

  파일별 핵심 역할 요약

   * CryMemoryManager.h, CryMemoryManager_impl.h: 시스템의 중앙 관제탑. 모든 메모리 요청이 이곳을 통해 이루어집니다.
   * BucketAllocator.h, CryMemoryAllocator.h: 주력 범용 할당기. 작고 빈번한 할당을 빠르게 처리합니다.
   * CryPool/ 디렉토리: 레고 블록 같은 모듈식 풀 할당기. 개발자가 필요에 맞게 커스텀 메모리 풀을 조립할 수 있게 해줍니다.
   * IDefragAllocator.h: 단편화 해결사. 스트리밍 시스템 등에서 메모리 파편화를 방지합니다.
   * CrySizer.h: 메모리 탐정. 시스템의 메모리 사용량을 정밀하게 측정합니다.
   * VirtualMemory.h: 땅 주인. 운영체제로부터 메모리가 위치할 가상 주소 공간을 확보합니다.
   * STL*.h 파일들: 번역가. 표준 STL 컨테이너가 크라이엔진의 메모리 시스템과 대화할 수 있게 해줍니다.

    Unreal Engine 메모리 관리 구조 요약

      1. 핵심 인터페이스: `FMalloc` (`MemoryBase.h`)
          * 모든 메모리 할당기의 기반이 되는 추상 클래스입니다.
          * Malloc, Realloc, Free 등 기본적인 메모리 할당 함수들을 순수 가상 함수로 정의합니다.
          * 전역 포인터 GMalloc이 현재 사용 중인 FMalloc 구현체를 가리키며, 엔진의 모든 메모리 할당은 FMemory 래퍼를 통해 이 GMalloc을 호출하는 방식으로
            이루어집니다.

      2. 다양한 할당기 구현체 (Allocator Implementations)
         언리얼은 특정 플랫폼이나 목적에 맞춰 다양한 FMalloc 구현체를 제공하며, 필요에 따라 교체할 수 있습니다.
          * `FMallocBinned2`: 대부분의 플랫폼에서 사용되는 기본 할당기입니다. CryEngine의 버킷 할당기와 유사하게, 미리 정해진 작은 크기(Bin)의 메모리 풀들을
            관리하여 작은 객체들의 할당/해제를 매우 빠르게 처리하고 메모리 단편화를 최소화합니다. 일정 크기 이상의 할당은 OS의 가상 메모리 관리자에게 직접
            요청합니다.
          * `FMallocAnsi`: C 표준 라이브러리의 malloc, free를 단순 래핑한 할당기입니다. 가장 기본적인 구현체이며, 다른 커스텀 할당기를 사용할 수 없는 환경이나
            디버깅 목적으로 사용됩니다.
          * 써드파티 할당기: FMallocJemalloc, FMallocMimalloc 등 멀티스레드 환경에서 고성능으로 유명한 외부 라이브러리를 쉽게 통합하여 사용할 수 있도록 래퍼를
            제공합니다.

      3. 강력한 기능 확장: 프록시 할당기 (Proxy Allocators)
         언리얼 메모리 시스템의 가장 큰 특징은 프록시 디자인 패턴입니다. 실제 메모리를 할당하는 주 할당기(예: FMallocBinned2)를 다른 FMalloc 구현체가
     감싸면서(wrapping) 추가적인 기능을 덧붙이는 방식입니다. 여러 프록시를 연쇄적으로 래핑할 수도 있습니다.
          * `FMallocDebug`: 할당된 메모리 앞뒤에 특정 값(Tag)을 붙여서 버퍼 오버런/언더런을 탐지합니다.
          * `FMallocStomp`: 메모리 할당을 페이지의 경계에 배치하여 메모리 침범 오류가 발생 즉시 크래시를 유발시켜 버그를 잡기 용이하게 만듭니다.
          * `FMallocLeakDetection`: 모든 할당의 콜 스택을 추적하여, 해제되지 않은 메모리(메모리 누수)를 찾아내는 기능을 제공합니다.
          * `FMallocFrameProfiler`: 프레임 단위로 메모리 할당/해제 통계를 수집하여 언리얼 프로파일러에서 시각적으로 분석할 수 있게 합니다.
          * `FMallocReplayProxy`: 모든 메모리 이벤트를 기록하여 나중에 그대로 재현(replay)함으로써 특정 상황의 메모리 문제를 분석할 수 있게 합니다.

      4. 플랫폼 추상화 (`PlatformMemory.h`)
          * 각기 다른 운영체제(Windows, Linux, Mac, 콘솔 등)의 메모리 관련 함수와 특성들을 FPlatformMemory라는 통일된 인터페이스로 추상화합니다. 이를 통해 엔진
            코드는 플랫폼에 상관없이 동일한 방식으로 메모리를 다룰 수 있습니다.

     CryEngine과의 비교 및 특징


     ┌──────────┬─────────────────────────────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────┐
     │ 특징     │ Unreal Engine                                                           │ CryEngine                                                     │
     ├──────────┼─────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────┤
     │ **핵심 ... │ 프록시 패턴 기반의 유연한 기능 확장. FMalloc 인터페이스를 중심으로 ...  │ 템플릿 메타프로그래밍 기반의 모듈식 조합. CryPool 시스템을... │
     │ **기본 ... │ FMallocBinned2 (풀 기반의 고성능 할당기)                                │ BucketAllocator (버킷 기반의 고성능 할당기). 개념적으로 매... │
     │ **유연...  │ 매우 높음. 런타임이나 시작 시점에 커맨드라인 인자로 할당기 체인을 쉽... │ 높음. 템플릿을 통해 다양한 할당기를 만들 수 있지만, 주로 ...  │
     │ **디버...  │ 매우 강력함. 프록시 패턴 덕분에 메모리 누수, 손상, 성능 분석 등 다양... │ 강력함. ICrySizer, 메모리 트레이싱 등 유사한 기능을 제공하... │
     │ STL 연동 │ TArray, TMap 등 자체 컨테이너를 주로 사용하며, 이 컨테이너들은 내부...  │ std::vector 등 표준 STL 컨테이너를 위한 커스텀 할당기 래퍼... │
     └──────────┴─────────────────────────────────────────────────────────────────────────┴───────────────────────────────────────────────────────────────┘

     결론

     Unreal Engine의 메모리 관리 시스템은 FMalloc이라는 단일 인터페이스를 중심으로, 실제 할당을 담당하는 주 할당기와 디버깅/프로파일링 등의 부가 기능을
     제공하는 프록시 할당기들을 자유롭게 조합하는 매우 유연하고 강력한 구조를 가지고 있습니다. 이는 다양한 개발 환경과 요구사항에 맞춰 메모리 시스템을 쉽게
     커스터마이징할 수 있게 해주는 언리얼 엔진의 핵심적인 장점 중 하나입니다. CryEngine이 템플릿을 이용해 컴파일 타임에 최적의 할당기를 '조립'하는 방식이라면,
     언리얼은 인터페이스와 프록시를 이용해 런타임에 필요한 기능을 '장착'하는 방식에 가깝다고 볼 수 있습니다.